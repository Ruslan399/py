import telebot
import threading
import time

TOKEN = ""  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã {user_id: partner_id}
users = {}
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–∂–∏–¥–∞—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
waiting_user = None

def notify_waiting(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥—ë—Ç"""
    global waiting_user
    count = 0
    while waiting_user == user_id:
        count += 1
        try:
            bot.send_message(user_id, f"–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... ({count*5} —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ)")
        except:
            break
        time.sleep(5)

# /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /find ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "‚Ä¢ /stop ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    )

# /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üß≠ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "‚úÖ /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üîç /find ‚Äî –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "‚õî /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "‚ÑπÔ∏è /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# /find
@bot.message_handler(commands=['find'])
def find(message):
    global waiting_user
    user_id = message.chat.id

    if user_id in users:
        bot.send_message(user_id, "‚ö†Ô∏è –¢—ã —É–∂–µ –æ–±—â–∞–µ—à—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    if waiting_user == user_id:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –∏—â–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏ ‚è≥")
        return

    if waiting_user is None:
        waiting_user = user_id
        bot.send_message(user_id, "üîé –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        threading.Thread(target=notify_waiting, args=(user_id,), daemon=True).start()
    else:
        partner_id = waiting_user
        waiting_user = None
        users[user_id] = partner_id
        users[partner_id] = user_id
        bot.send_message(user_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
        bot.send_message(partner_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")

# /stop
@bot.message_handler(commands=['stop'])
def stop(message):
    global waiting_user
    user_id = message.chat.id

    if user_id in users:
        partner_id = users[user_id]
        bot.send_message(user_id, "‚ùå –¢—ã –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        bot.send_message(partner_id, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        del users[user_id]
        del users[partner_id]
        return

    if waiting_user == user_id:
        waiting_user = None
        bot.send_message(user_id, "üö´ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    bot.send_message(user_id, "–¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'sticker', 'audio', 'voice'])
def forward_message(message):
    user_id = message.chat.id
    if user_id in users:
        partner_id = users[user_id]
        bot.copy_message(partner_id, user_id, message.message_id)
    else:
        bot.send_message(user_id, "–¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
bot.infinity_polling()


